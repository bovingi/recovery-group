st_sf()  %>%
### Add identifiers
mutate(unique_id = x,
lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
return(poly_samples)
})
### Combine
sample_grid <- do.call(rbind, point_grid)
View(sample_grid)
names(all_sub)
### Get additional data cols
all_sub_cols <- all_sub
st_geometry(all_sub_cols) <- NULL
### Merge them
sample_grid <- merge(sample_grid,
all_sub_cols,
by = "unique_id")
View(sample_grid)
st_write(all_sub,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_poly.shp")
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_points.shp")
knitr::opts_chunk$set(echo = TRUE)
### Load packages
library(tidyverse)
library(sf)
library(lubridate)
all_sub <- st_read("C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_poly.shp")
### Make sample grid
point_grid <- map(all_sub$unique_id, function(x) {
### subset to individual polygon
poly <- all_sub %>% filter(unique_id == x)
### make sample points for the polygon
poly_samples <- poly %>%
### Make samples (cellsize is where I'm defining the grid)
st_make_grid(cellsize = c(500, 500), what = "centers") %>%
### Convert to sf
st_sf()  %>%
### Add identifiers
mutate(unique_id = x,
lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
### Intersect with polygon to drop points outside boundary
poly_samples <- st_intersection(poly_samples, poly)
return(poly_samples)
})
### Make sample grid
point_grid <- map(all_sub$unique_id, function(x) {
### subset to individual polygon
poly <- all_sub %>% filter(unique_id == x)
### make sample points for the polygon
poly_samples <- poly %>%
### Make samples (cellsize is where I'm defining the grid)
st_make_grid(cellsize = c(500, 500), what = "centers") %>%
### Convert to sf
st_sf()  %>%
### Add identifiers
mutate(unique_id = x,
lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
# ### Intersect with polygon to drop points outside boundary
# poly_samples <- st_intersection(poly_samples, poly)
return(poly_samples)
})
### Combine
sample_grid <- do.call(rbind, point_grid)
### Make sample grid
point_grid <- map(all_sub$unique_id, function(x) {
### subset to individual polygon
poly <- all_sub %>% filter(unique_id == x)
### make sample points for the polygon
poly_samples <- poly %>%
### Make samples (cellsize is where I'm defining the grid)
st_make_grid(cellsize = c(500, 500), what = "centers") %>%
### Convert to sf
st_sf()  %>%
### Add identifiers
mutate(unique_id = x,
lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
# ### Intersect with polygon to drop points outside boundary
# poly_samples <- st_intersection(poly_samples, poly)
return(poly_samples)
})
names(all_sub)
### Open data, add column for type of polygon
burned_polygons <- st_read("C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/recovery.shp") %>%
mutate(burned_status = "burned")
unburned_polygons <- st_read("C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/unburned.shp") %>%
mutate(burned_status = "unburned")
### Randomly sample 10 burned polygons
burned_sub <- burned_polygons %>%
sample_n(10)
### Get the corresponding unburned polygons
unburned_sub <- unburned_polygons %>%
filter(Event_ID %in% burned_sub$Event_ID)
### Combine into single sf
all_sub <- rbind(burned_sub,
unburned_sub)
### Extract dates
all_sub <- all_sub %>%
mutate(year_fire = year(Ig_Date),
month_fire = month(Ig_Date),
day_fire = day(Ig_Date))
### Add unique ID
all_sub <- all_sub %>%
mutate(unique_id = paste0(burned_status, "_",
Event_ID))
### Make sample grid
point_grid <- map(all_sub$unique_id, function(x) {
### subset to individual polygon
poly <- all_sub %>% filter(unique_id == x)
### make sample points for the polygon
poly_samples <- poly %>%
### Make samples (cellsize is where I'm defining the grid)
st_make_grid(cellsize = c(500, 500), what = "centers") %>%
### Convert to sf
st_sf()  %>%
### Add identifiers
mutate(unique_id = x,
lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
# ### Intersect with polygon to drop points outside boundary
# poly_samples <- st_intersection(poly_samples, poly)
return(poly_samples)
})
### Make sample grid
point_grid <- map(all_sub$unique_id, function(x) {
### subset to individual polygon
poly <- all_sub %>% filter(unique_id == x)
### make sample points for the polygon
poly_samples <- poly %>%
### Make samples (cellsize is where I'm defining the grid)
st_make_grid(cellsize = c(500, 500), what = "centers") %>%
### Convert to sf
st_sf()  %>%
### Add identifiers
mutate(unique_id = x,
lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
### Intersect with polygon to drop points outside boundary
poly_samples <- st_intersection(poly_samples, poly)
return(poly_samples)
})
### Combine
sample_grid <- do.call(rbind, point_grid)
### Get additional data cols
all_sub_cols <- all_sub
st_geometry(all_sub_cols) <- NULL
### Merge them
sample_grid <- merge(sample_grid,
all_sub_cols,
by = "unique_id")
st_write(all_sub,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_polys.shp")
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_grid_points.shp")
class(sample_grid)
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_grid_points.shp")
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_points.shp")
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_sample_points.shp")
knitr::opts_chunk$set(echo = TRUE)
### Load packages
library(tidyverse)
library(sf)
library(lubridate)
### Open data, add column for type of polygon
burned_polygons <- st_read("C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/recovery.shp") %>%
mutate(burned_status = "burned")
unburned_polygons <- st_read("C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/unburned.shp") %>%
mutate(burned_status = "unburned")
### Randomly sample 10 burned polygons
burned_sub <- burned_polygons %>%
sample_n(10)
### Get the corresponding unburned polygons
unburned_sub <- unburned_polygons %>%
filter(Event_ID %in% burned_sub$Event_ID)
### Combine into single sf
all_sub <- rbind(burned_sub,
unburned_sub)
### Extract dates
all_sub <- all_sub %>%
mutate(year_fire = year(Ig_Date),
month_fire = month(Ig_Date),
day_fire = day(Ig_Date))
### Add unique ID
all_sub <- all_sub %>%
mutate(unique_id = paste0(burned_status, "_",
Event_ID))
### Make sample grid
point_grid <- map(all_sub$unique_id, function(x) {
### subset to individual polygon
poly <- all_sub %>% filter(unique_id == x)
### make sample points for the polygon
poly_samples <- poly %>%
### Make samples (cellsize is where I'm defining the grid)
st_make_grid(cellsize = c(500, 500), what = "centers") %>%
### Convert to sf
st_sf()  %>%
### Add identifiers
mutate(unique_id = x,
lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
### Intersect with polygon to drop points outside boundary
poly_samples <- st_intersection(poly_samples, poly)
return(poly_samples)
})
### Combine
sample_grid <- do.call(rbind, point_grid)
### Get additional data cols
all_sub_cols <- all_sub
st_geometry(all_sub_cols) <- NULL
### Merge them
sample_grid <- merge(sample_grid,
all_sub_cols,
by = "unique_id")
View(all_sub)
st_write(all_sub,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_polys.shp")
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_sample_points.shp")
class(sample_grid)
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_sample_points.shp",
overwrite = TRUE)
names(sample_grid)
sample_grid <- do.call(rbind, point_grid)
names(sample_grid)
head(sample_grid$unique_id)
head(sample_grid$unique_id.1)
### Drop extra col
sample_grid <- sample_grid %>%
dplyr::select(-unique_id.1)
nameS(sample_grid)
names(sample_grid)
st_write(sample_grid,
"C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire/subset_points.shp")
knitr::opts_chunk$set(echo = TRUE)
### Load packages
library(tidyverse)
library(sf)
### Set path for files -- replace this in your script!
file_path <- "C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire"
subset_polys <- st_read(file.path(file_path, "/subset_polys.shp"))
### Set path for files -- replace this in your script!
path_subset <- "C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire"
subset_polys <- st_read(file.path(path_subset, "/subset_polys.shp"))
### Open sample grid
subset_polys <- st_read(file.path(path_subset, "/subset_polys.shp"))
### Open polygons
subset_polys <- st_read(file.path(path_subset, "/subset_polys.shp"))
### Open sample grid
subset_points <- st_read(file.path(path_subset, "/subset_polys.shp"))
path_raster <- "C:/Users/kjsie/OneDrive/Documents/recovery-group/LF2020_EVT_220_CONUS"
library(raster)
### file path for the raster (here, I'm using Landfire's EVT as an example)
path_raster <- "C:/Users/kjsie/OneDrive/Documents/recovery-group/LF2020_EVT_220_CONUS/Tif"
landfire_evt <- raster(file.path(path_raster, "/LC20_EVT_220.tif"))
landfire_evt
library(rgdal)
?make_EPSG
crs(landfire_evt)
st_crs(subset_polys)
subset_polys <- st_read(file.path(path_subset, "/subset_polys.shp")) %>%
st_transform(., crs = 5070)
st_crs(subset_polys)
subset_points <- st_read(file.path(path_subset, "/subset_polys.shp")) %>%
st_transform(., crs = 5070)
### Crop raster
crop_raster <- crop(landfire_evt,
extent(subset_polys))
plot(crop_raster)
### Mask raster
crop_raster <- mask(crop_raster,
subset_polys)
crop_raster
plot(crop_raster)
crop_raster <- crop(landfire_evt,
extent(subset_polys))
plot(crop_raster)
mask_raster <- raster::mask(crop_raster,
subset_polys)
plot(mask_raster)
test <- mask(crop(landfire_evt, extent(subset_polys)), subset_polys)
plot(test)
### Extract raster values to grid samples
extract_raster <- raster::extract(landfire_evt,
subset_points)
class(extract_raster)
names(extract_raster)
names(crop_raster)
### Extract raster values to grid samples
extract_raster <- raster::extract(landfire_evt,
subset_points,
df = TRUE)
View(extract_raster)
names(subset_points)
### Open sample grid and transform to EPSG of raster layer
subset_points <- st_read(file.path(path_subset, "/subset_points.shp")) %>%
### transform projection to match raster
st_transform(., crs = 5070)
### Extract raster values to grid samples
extract_raster <- raster::extract(landfire_evt,
subset_points,
df = TRUE)
View(extract_raster)
library(sp)
## POINTS
### Make the points sf an sp object
points_sp <- as(subset_points, 'Spatial')
### Extract raster values to grid samples
extract_raster <- raster::extract(landfire_evt,
points_sp,
df = TRUE,
sp = TRUE)
extract_raster <- extract_raster %>%
st_as_sf()
knitr::opts_chunk$set(echo = TRUE)
### Load packages
library(tidyverse)
library(sf)
library(sp)
library(raster)
### Set path for files -- replace this in your script!
### file path for the subset of polygons and grid points
path_subset <- "C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire"
### file path for the raster (here, I'm using Landfire's EVT as an example)
path_raster <- "C:/Users/kjsie/OneDrive/Documents/recovery-group/LF2020_EVT_220_CONUS/Tif"
### file path for cropped datasets
path_saveto <- "C:/Users/kjsie/OneDrive/Documents/recovery-group"
## Write out files
### raster cropped to polygons
writeRaster(crop_raster,
filename = file_path(path_saveto, "/landfire_evt_cropped.tif"))
### raster cropped to polygons
writeRaster(crop_raster,
filename = file.path(path_saveto, "/landfire_evt_cropped.tif"))
View(extract_raster)
class(extract_raster)
?st_write
### write out shp of raster values extracted to points
st_write(extract_raster,
file.path(path_saveto, "/landfire_evt_points.shp"))
plot(crop_raster)
crop_raster <- mask(crop(landfire_evt,
extent(subset_polys)),
subset_polys)
crop_raster <- mask(crop(landfire_evt,
extent(subset_polys)),
subset_polys)
writeRaster(crop_raster,
filename = file.path(path_saveto, "/landfire_evt_cropped.tif"))
reticulate::repl_python()
import rioxarray as rxr
import geopandas as gpd
yes
import rioxarray as rxr
import geopandas as gpd
python_path_subset = "C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire"
python_path_raster = "C:/Users/kjsie/OneDrive/Documents/recovery-group/LF2020_EVT_220_CONUS/Tif"
python_path_saveto = "C:/Users/kjsie/OneDrive/Documents/recovery-group"
python_subset_poly = gpd.read_file(
path.join(python_path_subset, '/subset_polys.shp'))
import rasterio
from rasterio.mask import mask
import sys
'geopandas' in sys.modules
pip install geopandas
import geopandas as gpd
python_subset_poly = gpd.read_file(
path.join(python_path_subset, '/subset_polys.shp'))
quit
path_subset <- "C:/Users/kjsie/OneDrive/Documents/recovery-group/Buffered_fire"
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
library(rgdal)
library(sp)
library(raster)
library(tidyr)
library(dplyr)
library(assertthat)
library(sf)
library(terra)
library(lubridate)
library(stars)
MTBS_download <- file.path('data/MTBS', 'mtbs_perims_DD.shp')
if (!file.exists(MTBS_download)) {
from <- "https://edcintl.cr.usgs.gov/downloads/sciweb1/shared/MTBS_Fire/data/composite_data/burned_area_extent_shapefile/mtbs_perimeter_data.zip"
to <- paste0('MTBS', ".zip")
download.file(from, to)
unzip(to, exdir = 'data/MTBS')
unlink(to)
assert_that(file.exists(MTBS_download))
}
MTBS_fires_sf<- st_read("data/MTBS","mtbs_perims_DD")
mtbs <- st_read("E:/fire_sev_rdd/mtbs/mtbs_perims_DD.shp") %>%
st_transform(., crs = 5070)
names(mtbs)
mtbs$Ig_Date <- ymd(mtbs$Ig_Date)
mtbs$year <- year(mtbs$Ig_Date)
mtbs$month <- month(mtbs$Ig_Date)
mtbs$ig_day <- day(mtbs$Ig_Date)
View(mtbs)
srockies <- st_read("data/southernrockies_shp/southernrockies.shp")
srockies <- st_transform(srockies, crs = 5070)
range(mtbs$year)
mtbs <- mtbs %>% filter(year > 1999)
range(mtbs$year)
mtbs_sr <- st_intersection(mtbs, srockies)
unique(mtbs_sr$Incid_Type)
table(mtbs_sr$Incid_Type)
class(mtbs$Incid_Type)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(lubridate)
mtbs_sr <- mtbs_sr %>%
filter(!Incid_Type == "Prescribed Fire")
table(mtbs_sr$Incid_Type)
st_write(mtbs_sr,
"data/mtbs_study.shp")
getwd()
st_write(mtbs_sr,
"/data/mtbs_study.shp")
st_write(mtbs_sr,
"data/mtbs_study.shp")
?st_write
st_write(mtbs_sr,
dsn = "data",
"mtbs_study.shp")
### write out sf
st_write(mtbs_sr,
dsn = "data",
layer = "mtbs_srockies",
driver = "ESRI Shapefile")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(lubridate)
mtbs_sr <- st_read("recovery-group/data/mtbs_srockies.shp")
mtbs_sr <- st_read("/data/mtbs_srockies.shp")
mtbs_sr <- st_read("data/mtbs_srockies.shp")
getwd()
mtbs_sr <- st_read("C:/Users/kjsie/Documents/recovery-group/data.shp")
mtbs_sr <- st_read("C:/Users/kjsie/Documents/recovery-group/data/mtbs_srockies.shp")
library(raster)
t_e <- raster("C:/Users/kjsie/Documents/recovery-group/data/stable_trailing_edge_forest.tif")
t_e
plot(t_e)
t_e <- projectRaster(t_e, crs = 5070)
ggplot() +
geom_raster(data = t_e, aes(x = x, y = y, fill = stable_trailing_edge_forest))
ggplot(data = t_e)
ggplot() +
geom_tile(data = t_e, aes(x = x, y = y, fill = stable_trailing_edge_forest))
ggplot() +
geom_sf(data = mtbs_sr)
ggplot() +
geom_sf(data = mtbs_sr) +
geom_raster(data = t_e, aes(x = x, y = y, fill = stable_trailing_edge_forest))
plot(t_e)
View(t_e)
ggplot() +
geom_sf(data = mtbs_sr) +
geom_raster(data = t_e, aes(fill=factor(value)))
install.packages("stars")
install.packages("stars")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(lubridate)
library(raster)
library(stars)
t_e <- read_stars("C:/Users/kjsie/Documents/recovery-group/data/stable_trailing_edge_forest.tif")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(lubridate)
library(raster)
library(stars)
install.packages(sf)
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("sf")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(lubridate)
library(raster)
library(stars)
mtbs_sr <- st_read("C:/Users/kjsie/Documents/recovery-group/data/mtbs_srockies.shp")
t_e <- read_stars("C:/Users/kjsie/Documents/recovery-group/data/stable_trailing_edge_forest.tif")
ggplot() +
geom_sf(data = mtbs_sr) +
geom_raster(data = t_e, aes(fill=factor(value)))
st_crs(t_e)
### to poly
t_e <- st_as_sf(t_e)
t_e <- st_transform(t_e, crs = 5070)
### plot
ggplot() +
geom_sf(data = t_e) +
geom_sf(data = mtbs)
ggplot() +
geom_sf(data = t_e) +
geom_sf(data = mtbs_sr)
